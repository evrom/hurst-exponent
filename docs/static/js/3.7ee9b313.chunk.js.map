{"version":3,"sources":["../node_modules/hurst/hurst_bg.js"],"names":["cachegetFloat64Memory0","WASM_VECTOR_LEN","passArrayF64ToWasm0","arg","malloc","ptr","length","buffer","wasm","Float64Array","set","rssimple","x","ptr0","len0","rs_corrected"],"mappings":"qSAEIA,EAAyB,KAQ7B,IAAIC,EAAkB,EAEtB,SAASC,EAAoBC,EAAKC,GAC9B,IAAMC,EAAMD,EAAoB,EAAbD,EAAIG,QAGvB,OAZ+B,OAA3BN,GAAmCA,EAAuBO,SAAWC,IAAYD,SACjFP,EAAyB,IAAIS,aAAaD,IAAYD,SAEnDP,GAOaU,IAAIP,EAAKE,EAAM,GACnCJ,EAAkBE,EAAIG,OACfD,EAOJ,SAASM,EAASC,GACrB,IAAIC,EAAOX,EAAoBU,EAAGJ,KAC9BM,EAAOb,EAEX,OADUO,IAAcK,EAAMC,GAS3B,SAASC,EAAaH,GACzB,IAAIC,EAAOX,EAAoBU,EAAGJ,KAC9BM,EAAOb,EAEX,OADUO,IAAkBK,EAAMC","file":"static/js/3.7ee9b313.chunk.js","sourcesContent":["import * as wasm from './hurst_bg.wasm';\n\nlet cachegetFloat64Memory0 = null;\nfunction getFloat64Memory0() {\n    if (cachegetFloat64Memory0 === null || cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArrayF64ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 8);\n    getFloat64Memory0().set(arg, ptr / 8);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* Simple R/S Hurst estimation\n* @param {Float64Array} x\n* @returns {number}\n*/\nexport function rssimple(x) {\n    var ptr0 = passArrayF64ToWasm0(x, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.rssimple(ptr0, len0);\n    return ret;\n}\n\n/**\n* Corrected R over S Hurst exponent\n* @param {Float64Array} x\n* @returns {number}\n*/\nexport function rs_corrected(x) {\n    var ptr0 = passArrayF64ToWasm0(x, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.rs_corrected(ptr0, len0);\n    return ret;\n}\n\n"],"sourceRoot":""}