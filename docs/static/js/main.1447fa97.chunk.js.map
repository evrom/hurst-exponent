{"version":3,"sources":["TimeSeriesChart.tsx","HurstEstimations.tsx","datasets/index.ts","App.tsx","index.tsx"],"names":["TimeSeriesChart","props","className","ResponsiveContainer","width","height","LineChart","data","Line","type","dot","dataKey","stroke","XAxis","scale","tickFormatter","tick","getFullYear","Tooltip","YAxis","numeral","format","HurstEstimations","useState","rsSimple","setRsSimple","rsCorrected","setRsCorrected","then","module","rssimple","rs_corrected","datasets","nile","title","btc","corn","App","datasetName","setDatasetName","target","rel","href","Object","entries","map","k","disabled","onClick","x","y","Date","Float64Array","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0wxIA0CeA,EAtB0B,SAACC,GACxC,OACE,qBAAKC,UAAU,kBAAf,SACE,cAACC,EAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAO,OAAzC,SACE,eAACC,EAAA,EAAD,CAAWF,MAAO,IAAKC,OAAQ,IAAKE,KAAMN,EAAMM,KAAhD,UACE,cAACC,EAAA,EAAD,CAAMC,KAAK,SAASC,KAAK,EAAOC,QAAQ,IAAIC,OAAO,YACnD,cAACC,EAAA,EAAD,CACEF,QAAQ,IACRG,MAAM,OACNC,cAAe,SAACC,GAAD,OAAUA,EAAKC,iBAEhC,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CACER,QAAQ,IACRI,cAAe,SAACC,GAAD,OAAUI,IAAQJ,GAAMK,OAAO,iBCH3CC,EAzB2B,SAAC,GAAqB,IAAnBf,EAAkB,EAAlBA,KAAkB,EAC7BgB,mBAAS,GADoB,mBACtDC,EADsD,KAC5CC,EAD4C,OAEvBF,mBAAS,GAFc,mBAEtDG,EAFsD,KAEzCC,EAFyC,KAS7D,OALA,8BAAgBC,MAAK,SAACC,GACpBJ,EAAYI,EAAOC,SAASvB,IAC5BoB,EAAeE,EAAOE,aAAaxB,OAInC,gCACE,kCACE,+BACE,oEACA,6BAAKmB,OAEP,+BACE,2DACA,6BAAKF,aCKAQ,EAf2B,CACxCC,KAAM,CACJC,MAAO,8BACP3B,K,QAEF4B,IAAK,CACHD,MAAO,oBACP3B,K,QAEF6B,KAAM,CACJF,MAAO,iCACP3B,K,SC2EW8B,EA9FO,WAAO,IAAD,EACYd,mBAAS,QADrB,mBACnBe,EADmB,KACNC,EADM,KAG1B,OACE,sBAAKrC,UAAU,MAAf,UACE,mCACE,gDACA,oCACM,IACJ,mBACEsC,OAAO,SACPC,IAAI,sBACJC,KAAK,+CAHP,4BAMK,IARP,wLAWiD,IAC/C,oBACEF,OAAO,SACPC,IAAI,sBACJC,KAAK,sCAHP,0GAZF,UAuBF,iCACGC,OAAOC,QAAQZ,GAAUa,KAAI,YAAqB,IAAD,mBAAlBC,EAAkB,KAAbZ,EAAa,KAAbA,MACnC,OACE,wBAEEa,SAAUT,GAAeQ,EACzBE,QAAS,kBAAMT,EAAeO,IAHhC,SAKGZ,GAJIY,MAQX,cAAC,EAAD,CACEvC,KAAMyB,EAASM,GAAa/B,KAAKsC,KAAI,YAAe,IAAZI,EAAW,EAAXA,EAAGC,EAAQ,EAARA,EACzC,MAAO,CAAED,EAAG,IAAIE,KAAKF,GAAIC,EAAGA,QAGhC,mDACA,cAAC,EAAD,CACE3C,KAAM,IAAI6C,aAAapB,EAASM,GAAa/B,KAAKsC,KAAI,qBAAGK,QAE3D,iDACmB,IACjB,mBACEV,OAAO,SACPC,IAAI,sBACJC,KAAK,iCAHP,mBAMK,IARP,6BAWA,gDACA,+BACE,+BACE,wCADF,+JAKA,+BACE,mCAAM,IAAN,UADF,sNAMA,+BACE,mCAAM,IAAN,UADF,2dAYJ,iCACE,mBAAGA,KAAK,0CAAR,0B,cCxFRW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1447fa97.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\nimport numeral from \"numeral\";\n\ntype Data = {\n  y: number;\n  x: number | Date;\n};\n\ntype Props = {\n  data: Data[];\n};\n\nconst TimeSeriesChart: React.FC<Props> = (props: Props) => {\n  return (\n    <div className=\"chart-container\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <LineChart width={600} height={300} data={props.data}>\n          <Line type=\"linear\" dot={false} dataKey=\"y\" stroke=\"#8884d8\" />\n          <XAxis\n            dataKey=\"x\"\n            scale=\"time\"\n            tickFormatter={(tick) => tick.getFullYear()}\n          />\n          <Tooltip />\n          <YAxis\n            dataKey=\"y\"\n            tickFormatter={(tick) => numeral(tick).format(\"0a\")}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default TimeSeriesChart;\n","import React, { useState } from \"react\";\n\ntype Props = {\n  data: Float64Array;\n};\n\nconst HurstEstimations: React.FC<Props> = ({ data }: Props) => {\n  const [rsSimple, setRsSimple] = useState(0);\n  const [rsCorrected, setRsCorrected] = useState(0);\n\n  import(\"hurst\").then((module) => {\n    setRsSimple(module.rssimple(data));\n    setRsCorrected(module.rs_corrected(data));\n  });\n\n  return (\n    <table>\n      <tbody>\n        <tr>\n          <th>Hurst Exponent from Rescaled Range</th>\n          <td>{rsCorrected}</td>\n        </tr>\n        <tr>\n          <th>Simplified rescaled range</th>\n          <td>{rsSimple}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n\nexport default HurstEstimations;\n","import nile from \"./nile.json\";\nimport btc from \"./btc.json\";\nimport corn from \"./corn.json\";\n\ntype DataPoint = {\n  y: number;\n  x: string;\n};\n\ntype Dataset = {\n  title: string;\n  data: DataPoint[];\n};\n\nconst datasets: Record<string, Dataset> = {\n  nile: {\n    title: \"Nile water levels 1871-1984\",\n    data: nile,\n  },\n  btc: {\n    title: \"BTC/USD 2015-2021\",\n    data: btc,\n  },\n  corn: {\n    title: \"Corn futures opening 2015-2021\",\n    data: corn,\n  },\n};\n\nexport default datasets;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport TimeSeriesChart from \"./TimeSeriesChart\";\nimport HurstEstimations from \"./HurstEstimations\";\nimport datasets from \"./datasets\";\n\nconst App: React.FC = () => {\n  const [datasetName, setDatasetName] = useState(\"nile\");\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Hurst Exponent</h1>\n        <p>\n          The{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://en.wikipedia.org/wiki/Hurst_exponent\"\n          >\n            Hurst Exponent\n          </a>{\" \"}\n          is a metric of the long term memory of a time series. Harold Edwin\n          Hurst developed the technique, and Beno√Æt Mandelbrot explored it\n          further. For an introduction to the topic, see{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"http://dx.doi.org/10.3390/e19090437\"\n          >\n            {`\"`}A brief history of long memory: Hurst, Mandelbrot and the road\n            to ARFIMA{`\"`} (2017)\n          </a>\n          .\n        </p>\n      </header>\n      <main>\n        {Object.entries(datasets).map(([k, { title }]) => {\n          return (\n            <button\n              key={k}\n              disabled={datasetName == k}\n              onClick={() => setDatasetName(k)}\n            >\n              {title}\n            </button>\n          );\n        })}\n        <TimeSeriesChart\n          data={datasets[datasetName].data.map(({ x, y }) => {\n            return { x: new Date(x), y: y };\n          })}\n        />\n        <h2>Hurst Estimations</h2>\n        <HurstEstimations\n          data={new Float64Array(datasets[datasetName].data.map(({ y }) => y))}\n        ></HurstEstimations>\n        <p>\n          calculated using{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://crates.io/crates/hurst\"\n          >\n            Hurst\n          </a>{\" \"}\n          compiled to WebAssembly\n        </p>\n        <h2>Interpretation</h2>\n        <ul>\n          <li>\n            <b>H = 0.5</b>, then the time series is Brownian. Meaning there is\n            no detectable long term memory, and each change in value appears to\n            be random and not autocorrelated\n          </li>\n          <li>\n            <b>H {\"<\"} 0.5</b>, then the time series is negatively\n            autocorrelated. I.e. there is a negative feedback loop. A high value\n            signifies a low value with come in the future, while a low value\n            signifies a high value in the future.\n          </li>\n          <li>\n            <b>H {\">\"} 0.5</b>, then the time series is positively\n            autocorrelated. I.e. A high value signifies a higher value with come\n            in the future, while a low value signifies a lower value in the\n            future. Most real world time series have a Hurst exponent above 0.5,\n            and often around 0.72. Financial data tends to be higher than\n            natural phenomena, because there are more positive feedback loops,\n            less negative loops, and -- for pricing -- the inflation pushes the\n            value upward exponentially.\n          </li>\n        </ul>\n      </main>\n      <footer>\n        <a href=\"https://github.com/evrom/hurst-exponent\">Github</a>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"normalize.css\";\nimport \"sakura.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}